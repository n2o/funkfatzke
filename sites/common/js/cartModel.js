// Generated by CoffeeScript 1.7.1
(function() {
  var CartItem, cartModel;

  CartItem = function(description, sku, price, shippingType, weight, quantity, duration) {
    var self;
    self = this;
    self.description = ko.observable(description);
    self.sku = ko.observable(sku);
    self.price = ko.observable(price);
    self.shippingType = ko.observable(shippingType);
    self.weight = ko.observable(weight);
    self.quantity = ko.observable(quantity);
    self.duration = ko.observable(duration);
    self.priceFriendly = ko.computed(function() {
      var p;
      p = self.price() + " " + cartModel.currency;
      if (cartModel.currency === "USD") {
        p = "$" + p;
      }
      return p;
    });
    self.totalWeight = ko.computed(function() {
      weight = parseFloat(self.weight()) * parseInt(self.quantity());
      return Number(weight);
    });
    self.total = ko.computed(function() {
      var total;
      total = parseFloat(self.price()) * parseInt(self.quantity()) * parseInt(self.duration());
      return Number(total);
    });
    self.totalFriendly = ko.computed(function() {
      var p, total;
      total = parseFloat(self.price()) * parseInt(self.quantity()) * parseInt(self.duration());
      p = Number(total).toFixed(2) + " " + cartModel.currency;
      if (cartModel.currency === "USD") {
        p = "$" + p;
      }
      return p;
    });
  };

  cartModel = {
    payPalId: "",
    logo: "",
    useSandbox: false,
    currency: "EUR",
    weightUnit: "kg",
    taxRate: 0,
    returnUrl: "return",
    calculation: "free",
    flatRate: 0,
    tiers: [],
    items: ko.observableArray([]),
    init: function() {
      var calculation, currency, flatRate, logo, payPalId, taxRate, tiers, url, useSandbox, weightUnit;
      payPalId = $("#cart").attr("data-paypalid");
      logo = $("#cart").attr("data-logo");
      useSandbox = $("#cart").attr("data-usesandbox");
      currency = $("#cart").attr("data-currency");
      weightUnit = $("#cart").attr("data-weightunit");
      calculation = $("#cart").attr("data-shippingcalculation");
      flatRate = Number($("#cart").attr("data-shippingrate"));
      tiers = $("#cart").attr("data-shippingtiers");
      taxRate = $("#cart").attr("data-taxrate");
      if (payPalId !== "" && (payPalId != null)) {
        cartModel.payPalId = payPalId;
      }
      if (logo !== "" && (logo != null)) {
        cartModel.logo = logo;
      }
      if (useSandbox === "1") {
        cartModel.useSandbox = true;
      }
      if (currency !== "" && (currency != null)) {
        cartModel.currency = currency;
      }
      if (weightUnit !== "" && (weightUnit != null)) {
        cartModel.weightUnit = weightUnit;
      }
      if (calculation !== "" && (calculation != null)) {
        cartModel.calculation = calculation;
      }
      if (!isNaN(flatRate) && (flatRate != null)) {
        cartModel.flatRate = flatRate;
      }
      if (cartModel.tiers !== "" && (cartModel.tiers != null)) {
        cartModel.tiers = JSON.parse(decodeURI(tiers));
      }
      if (!isNaN(taxRate) && (taxRate != null)) {
        taxRate = Number(taxRate.replace(/[^0-9\.]+/g, ""));
        cartModel.taxRate = taxRate;
      }
      url = "http://" + $("body").attr("data-domain") + "/";
      cartModel.returnUrl = url;
      cartModel.setupEvents();
      cartModel.updateCart();
      console.log($("#cart").get(0));
      ko.applyBindings(cartModel, $("#cart").get(0));
    },
    setupEvents: function() {
      $(".cart-toggle").on("click", function() {
        $("#cart").toggleClass("active");
        $("body").toggleClass("show-cart");
      });
      $(".shelf-add button").on("click", function() {
        var description, duration, item, match, price, quantity, shelfItem, sku, type, weight;
        shelfItem = $(this).parents(".shelf-item");
        description = $(shelfItem).find(".shelf-description").text();
        sku = $(shelfItem).find(".shelf-sku").text();
        price = Number($(shelfItem).find(".shelf-price").attr("data-price"));
        if (isNaN(price)) {
          throw "cartModel.js: pricing error";
        }
        type = $(shelfItem).find(".shelf-shipping").attr("data-type");
        weight = Number($(shelfItem).find(".shelf-shipping").attr("data-weight"));
        if (isNaN(weight)) {
          weight = 0;
        }
        quantity = Number($(shelfItem).find(".shelf-quantity input").val());
        duration = Number($(shelfItem).find(".shelf-duration input").val());
        if (isNaN(quantity)) {
          quantity = 1;
        }
        if (isNaN(duration)) {
          duration = 1;
        }
        item = new CartItem(description, sku, price, type, weight, quantity, duration);
        match = false;
        match = ko.utils.arrayFirst(cartModel.items(), function(curr) {
          var q;
          if (curr.sku().toUpperCase() === item.sku().toUpperCase()) {
            q = parseInt(curr.quantity()) + parseInt(quantity);
            curr.quantity(q);
            return true;
          }
        });
        if (!match) {
          cartModel.items.push(item);
        }
        cartModel.updateExternal();
        cartModel.saveCart();
      });
    },
    updateCart: function() {
      var description, duration, item, price, quantity, sku, storedItems, str, type, weight, x;
      if (location.hash === "#clear-cart") {
        localStorage.removeItem("respond-cart");
      }
      if (localStorage["respond-cart"]) {
        str = localStorage["respond-cart"];
        storedItems = eval(str);
        x = 0;
        while (x < storedItems.length) {
          console.log(storedItems[x]);
          description = storedItems[x].description;
          sku = storedItems[x].sku;
          price = Number(storedItems[x].price);
          type = storedItems[x].shippingType;
          weight = Number(storedItems[x].weight);
          quantity = Number(storedItems[x].quantity);
          duration = Number(storedItems[x].duration);
          item = new CartItem(description, sku, price, type, weight, quantity, duration);
          cartModel.items.push(item);
          x++;
        }
      }
      cartModel.updateExternal();
    },
    saveCart: function() {
      var json;
      json = ko.toJSON(cartModel.items());
      localStorage["respond-cart"] = json;
    },
    updateExternal: function() {
      $(".cart-count").text(cartModel.count());
      $(".cart-total").text(cartModel.subtotalFriendly());
    },
    updateQuantity: function(o, e) {
      var q;
      q = parseInt($(e.target).val());
      if (q <= 0) {
        cartModel.items.remove(o);
      } else {
        o.quantity(q);
      }
      cartModel.updateExternal();
      cartModel.saveCart();
    },
    updateDuration: function(o, e) {
      var q;
      q = parseInt($(e.target).val());
      if (q <= 0) {
        cartModel.items.remove(o);
      } else {
        o.duration(q);
      }
      cartModel.updateExternal();
      cartModel.saveCart();
    },
    removeFromCart: function(o, e) {
      cartModel.items.remove(o);
      cartModel.updateExternal();
      cartModel.saveCart();
    },
    checkoutWithPayPal: function(o, e) {
      var c, data, email, form, item, noshipping, url, x;
      email = cartModel.payPalId;
      data = {
        email: email,
        cmd: "_cart",
        upload: "1",
        currency_code: cartModel.currency,
        business: email,
        rm: "0",
        charset: "utf-8",
        "return": cartModel.returnUrl + "thank-you#clear-cart",
        cancel_return: cartModel.returnUrl + "cancel",
        notify_url: cartModel.returnUrl + "api/transaction/paypal",
        custom: $("body").attr("data-siteuniqid")
      };
      noshipping = 1;
      if (cartModel.logo !== "") {
        data["image_url"] = cartModel.logo;
      }
      x = 0;
      while (x < cartModel.items().length) {
        c = x + 1;
        item = cartModel.items()[x];
        data["item_name_" + c] = item.description();
        data["quantity_" + c] = item.quantity();
        data["duration_" + c] = item.duration();
        data["amount_" + c] = item.price().toFixed(2);
        data["item_number_" + c] = item.sku() + "-" + item.shippingType().toUpperCase();
        if (item.shippingType() === "shipped") {
          noshipping = 2;
        }
        x++;
      }
      data["no_shipping"] = noshipping;
      data["weight_unit"] = cartModel.weightUnit;
      data["handling_cart"] = cartModel.shipping().toFixed(2);
      data["tax_cart"] = cartModel.tax().toFixed(2);
      url = "https://www.paypal.com/cgi-bin/webscr";
      if (cartModel.useSandbox) {
        url = "https://www.sandbox.paypal.com/cgi-bin/webscr";
      }
      form = $("<form id=\"paypal-form\" action=\"" + url + "\" method=\"POST\"></form");
      for (x in data) {
        form.append("<input type=\"hidden\" name=\"" + x + "\" value=\"" + data[x] + "\" />");
      }
      $("body").append(form);
      $("#paypal-form").submit();
    }
  };

  cartModel.count = ko.computed(function() {
    var count;
    count = 0;
    ko.utils.arrayForEach(this.items(), function(item) {
      count += item.quantity();
    });
    return count;
  }, cartModel);

  cartModel.countShipped = ko.computed(function() {
    var count;
    count = 0;
    ko.utils.arrayForEach(this.items(), function(item) {
      if (item.shippingType() === "shipped") {
        count += item.quantity();
      }
    });
    return count;
  }, cartModel);

  cartModel.subtotal = ko.computed(function() {
    var total;
    total = 0;
    ko.utils.arrayForEach(this.items(), function(item) {
      total += item.total();
    });
    return total;
  }, cartModel);

  cartModel.subtotalShipped = ko.computed(function() {
    var total;
    total = 0;
    ko.utils.arrayForEach(this.items(), function(item) {
      if (item.shippingType() === "shipped") {
        total += item.total();
      }
    });
    return total;
  }, cartModel);

  cartModel.subtotalFriendly = ko.computed(function() {
    var p;
    p = cartModel.subtotal().toFixed(2) + " " + cartModel.currency;
    if (cartModel.currency === "USD") {
      p = "$" + p;
    }
    return p;
  }, cartModel);

  cartModel.tax = ko.computed(function() {
    return cartModel.subtotal() * cartModel.taxRate;
  }, cartModel);

  cartModel.taxFriendly = ko.computed(function() {
    var p;
    p = cartModel.tax().toFixed(2) + " " + cartModel.currency;
    if (cartModel.currency === "USD") {
      p = "$" + p;
    }
    p = "(" + cartModel.taxRate + "%) " + p;
    return p;
  }, cartModel);

  cartModel.totalWeight = ko.computed(function() {
    var total;
    total = 0;
    ko.utils.arrayForEach(this.items(), function(item) {
      if (item.shippingType() === "shipped") {
        total += item.totalWeight();
      }
    });
    return total;
  }, cartModel);

  cartModel.totalWeightFriendly = ko.computed(function() {
    return cartModel.totalWeight() + " " + this.weightUnit;
  }, cartModel);

  cartModel.shipping = ko.computed(function() {
    var calculation, flatRate, from, rate, stop, subtotal, tiers, to, totalWeight, x;
    stop = 0;
    subtotal = cartModel.subtotalShipped();
    totalWeight = cartModel.totalWeight();
    calculation = cartModel.calculation;
    flatRate = cartModel.flatRate;
    tiers = cartModel.tiers;
    if (calculation === "free") {
      return 0;
    } else if (calculation === "flat-rate") {
      if (cartModel.countShipped() > 0) {
        return flatRate;
      } else {
        return 0;
      }
    } else if (calculation === "amount") {
      stop = subtotal;
    } else if (calculation === "weight") {
      stop = totalWeight;
    } else {
      return 0;
    }
    x = 0;
    while (x < tiers.length) {
      from = tiers[x].from;
      to = tiers[x].to;
      if (stop > from && stop <= to) {
        rate = Number(tiers[x].rate);
        console.log("rate=" + rate);
        if (!isNaN(rate)) {
          return rate;
        }
      }
      x++;
    }
    return 0;
  }, cartModel);

  cartModel.shippingFriendly = ko.computed(function() {
    var p;
    p = cartModel.shipping().toFixed(2) + " " + this.currency;
    if (this.currency === "USD") {
      p = "$" + p;
    }
    return p;
  }, cartModel);

  cartModel.total = ko.computed(function() {
    var total;
    total = cartModel.subtotal() + cartModel.shipping() + cartModel.tax();
    return total;
  }, cartModel);

  cartModel.totalFriendly = ko.computed(function() {
    var p;
    p = cartModel.total().toFixed(2) + " " + this.currency;
    if (this.currency === "USD") {
      p = "$" + p;
    }
    return p;
  }, cartModel);

  $(document).ready(function() {
    cartModel.init();
  });

}).call(this);
